class Solution(object):

    # 二分查找法，最后时间复杂度为O(n^2 * log(n))
    def binary_search(self, nums, left, target):
        right = len(nums) - 1
        while (left <= right):
            mid = (left + right) // 2
            #if nums[mid] == target:
                #return mid
            if nums[mid] >= target:
                right = mid - 1
            else:
                left = mid + 1
        return left

    def triangleNumber(self, nums):
        nums = sorted(nums)
        ans = 0

        for i in range(0, len(nums) - 2):
            for j in range(i + 1, len(nums) - 1):
                index = self.binary_search(nums, j + 1, nums[i] + nums[j])
               	#print(index, '-', j )
                ans += index - j - 1
                #print(ans)
        return ans


#if __name__ == '__main__':
   # print(Solution().triangleNumber([82,15,23,82,67,0,3,92,11]))